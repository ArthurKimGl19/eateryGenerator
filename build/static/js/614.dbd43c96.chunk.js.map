{"version":3,"file":"static/js/614.dbd43c96.chunk.js","mappings":"qIAEO,IAAMA,EAAc,SAAUC,GACjC,OAAOC,OAAOC,KAAKF,GAAQG,KAAI,SAACC,GAAE,OAAKJ,EAAOI,EAAG,GACrD,C,2KCEaC,EAAW,SAAUC,EAAwBC,GAItD,IAAAC,EAA4BC,EAAAA,SAA0B,CAAC,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlDI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACxBI,EAA4BL,EAAAA,SAAyB,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjDE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,EAA4BT,EAAAA,SAAyB,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjDE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GA8CxB,OA5CAV,EAAAA,WAAgB,WACZ,IAAMa,EAA2C,CAAC,EAClDf,EAAKgB,SAAQ,SAACC,GACLF,EAAQE,EAAOlB,IAGhBgB,EAAQE,EAAOlB,MAFfgB,EAAQE,EAAOlB,IAAa,CAIpC,IACAO,GAASY,EAAAA,EAAAA,GAAC,CAAC,EAAIH,GACnB,GAAG,IAEHb,EAAAA,WAAgB,WACZ,IAAMiB,EAAgBzB,OAAOC,KAAKU,GAC5Be,EAAwB,GAC9BD,EAAcH,SAAQ,SAACK,GACnBD,EAAYE,KAAKjB,EAAOgB,GAC5B,IACA,IAAME,EAA6B,GAClB,UAAbxB,EACAoB,EAAcH,SAAQ,SAACK,GACN,MAATA,EACAE,EAAiBD,KAAK,KACN,MAATD,EACPE,EAAiBD,KAAK,MACN,MAATD,EACPE,EAAiBD,KAAK,OACN,MAATD,GACPE,EAAiBD,KAAK,OAE9B,IAEAH,EAAcH,SAAQ,SAACK,GACnB,IAGMG,EAHcH,EAAKI,OAAO,GACGC,cACVL,EAAKM,MAAM,GAEpCJ,EAAiBD,KAAKE,EAC1B,IAEJd,EAAU,GAADkB,OAAKL,IACdT,EAAU,GAADc,OAAKR,GAClB,GAAG,CAACf,IAEG,CAAEI,OAAAA,EAAQI,OAAAA,EACrB,EAEAf,EAAS+B,UAAY,CACjB9B,SAAU+B,IAAAA,OAAAA,WACV9B,KAAM8B,IAAAA,MAAAA,Y,aChDK,SAASC,EAAUC,GAMT,IALrBjC,EAAQiC,EAARjC,SACAkC,EAAKD,EAALC,MAKMjC,GAAOkC,EAAAA,EAAAA,IAAe,SAACC,GAAK,OAAKA,EAAMC,SAASA,QAAQ,IAC9DnC,EAAmBC,EAAAA,UAAkCV,EAAAA,EAAAA,GAAYQ,IAA1DoC,GAAgEhC,EAAAA,EAAAA,GAAAH,EAAA,GAAxD,GACfoC,EAA2BvC,EAASC,EAAUqC,GACxCE,EAAY,CACd7B,OAFU4B,EAAN5B,OAGJ8B,SAAU,CACN,CACIN,MAAOA,EACPjC,KANUqC,EAANxB,OAOJ2B,gBAAiB,CACb,0BACA,0BACA,0BACA,0BACA,2BACA,2BAEJC,YAAa,CACT,wBACA,wBACA,wBACA,wBACA,yBACA,yBAEJC,YAAa,KAIzB,OACIC,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAACC,UAAU,cAAaC,SAAA,EAC9BH,EAAAA,EAAAA,MAAA,MAAAG,SAAA,CAAI,YAAU/C,EAAS,YACvBgD,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAAChD,KAAMsC,MAG5B,CCtDe,SAASW,IACpB,OACIN,EAAAA,EAAAA,MAACzC,EAAAA,SAAc,CAAA4C,SAAA,EACXC,EAAAA,EAAAA,KAAChB,EAAU,CAAChC,SAAU,OAAQkC,MAAO,mBACrCc,EAAAA,EAAAA,KAAChB,EAAU,CAAChC,SAAU,QAASkC,MAAO,qBAGlD,CDGAiB,EAAAA,GAAAA,SAAiBC,EAAAA,GAAYC,EAAAA,EAASC,EAAAA,G,4FEVzBC,EAAoCC,EAAAA,GACpCrB,EAAkDsB,EAAAA,E","sources":["helpers/dataFunctions.tsx","hooks/useChart.tsx","components/ChartGraph/ChartGraph.tsx","pages/DataPage/DataPage.tsx","redux/hooks.ts"],"sourcesContent":["import { EateryInterface, EateriesInterface } from '../shared/interfaces/eatery.interface';\n\nexport const cleanUpData = function (object: EateriesInterface): EateryInterface[] {\n    return Object.keys(object).map((id) => object[id]);\n};\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { EateryInterface } from '../shared/interfaces/eatery.interface';\nimport { CategoryType } from '../shared/types/props.types';\n\nexport const useChart = function (category: CategoryType, data: EateryInterface[]) {\n    type ValueType = {\n        [key in number | string]: number;\n    };\n    const [values, setValues] = React.useState<ValueType>({});\n    const [labels, setLabels] = React.useState<string[]>([]);\n    const [counts, setCounts] = React.useState<number[]>([]);\n\n    React.useEffect(() => {\n        const storage: Record<string | number, number> = {};\n        data.forEach((eatery) => {\n            if (!storage[eatery[category]]) {\n                storage[eatery[category]] = 1;\n            } else {\n                storage[eatery[category]]++;\n            }\n        });\n        setValues({ ...storage });\n    }, []);\n\n    React.useEffect(() => {\n        const categoryArray = Object.keys(values);\n        const countsArray: number[] = [];\n        categoryArray.forEach((type) => {\n            countsArray.push(values[type]);\n        });\n        const newCategoryArray: string[] = [];\n        if (category === 'price') {\n            categoryArray.forEach((type) => {\n                if (type === '1') {\n                    newCategoryArray.push('$');\n                } else if (type === '2') {\n                    newCategoryArray.push('$$');\n                } else if (type === '3') {\n                    newCategoryArray.push('$$$');\n                } else if (type === '4') {\n                    newCategoryArray.push('$$$$');\n                }\n            });\n        } else {\n            categoryArray.forEach((type) => {\n                const firstLetter = type.charAt(0);\n                const firstLetterCap = firstLetter.toUpperCase();\n                const remainingLetters = type.slice(1);\n                const capitalizedWord = firstLetterCap + remainingLetters;\n                newCategoryArray.push(capitalizedWord);\n            });\n        }\n        setLabels([...newCategoryArray]);\n        setCounts([...countsArray]);\n    }, [values]);\n\n    return { labels, counts };\n};\n\nuseChart.propTypes = {\n    category: PropTypes.string.isRequired,\n    data: PropTypes.array.isRequired\n};\n","import React, { ReactElement } from 'react';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Container } from 'react-bootstrap';\nimport { Doughnut } from 'react-chartjs-2';\nimport PropTypes from 'prop-types';\n\nimport { CategoryType } from '../../shared/types/props.types';\nimport { cleanUpData } from '../../helpers/dataFunctions';\nimport { EateryInterface } from '../../shared/interfaces/eatery.interface';\nimport { useAppSelector } from '../../redux/hooks';\nimport { useChart } from '../../hooks/useChart';\nimport './ChartGraph.css';\n\nChartJS.register(ArcElement, Tooltip, Legend);\n\nexport default function ChartGraph({\n    category,\n    label\n}: {\n    category: CategoryType;\n    label: string;\n}): ReactElement | null {\n    const data = useAppSelector((state) => state.eateries.eateries);\n    const [eateries] = React.useState<EateryInterface[]>(cleanUpData(data));\n    const { labels, counts } = useChart(category, eateries);\n    const chartData = {\n        labels: labels,\n        datasets: [\n            {\n                label: label,\n                data: counts,\n                backgroundColor: [\n                    'rgba(255, 99, 132, 0.2)',\n                    'rgba(54, 162, 235, 0.2)',\n                    'rgba(255, 206, 86, 0.2)',\n                    'rgba(75, 192, 192, 0.2)',\n                    'rgba(153, 102, 255, 0.2)',\n                    'rgba(255, 159, 64, 0.2)'\n                ],\n                borderColor: [\n                    'rgba(255, 99, 132, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 86, 1)',\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(153, 102, 255, 1)',\n                    'rgba(255, 159, 64, 1)'\n                ],\n                borderWidth: 1\n            }\n        ]\n    };\n    return (\n        <Container className=\"chart-graph\">\n            <h4>Eateries {category} Data</h4>\n            <Doughnut data={chartData} />\n        </Container>\n    );\n}\n\nChartGraph.propTypes = {\n    category: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired\n};\n","import React, { ReactElement } from 'react';\n\nimport ChartGraph from '../../components/ChartGraph/ChartGraph';\nexport default function DataPage(): ReactElement | null {\n    return (\n        <React.Fragment>\n            <ChartGraph category={'type'} label={'Eateries Type'} />\n            <ChartGraph category={'price'} label={'Eateries Price'} />\n        </React.Fragment>\n    );\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n"],"names":["cleanUpData","object","Object","keys","map","id","useChart","category","data","_React$useState","React","_React$useState2","_slicedToArray","values","setValues","_React$useState3","_React$useState4","labels","setLabels","_React$useState5","_React$useState6","counts","setCounts","storage","forEach","eatery","_objectSpread","categoryArray","countsArray","type","push","newCategoryArray","capitalizedWord","charAt","toUpperCase","slice","concat","propTypes","PropTypes","ChartGraph","_ref","label","useAppSelector","state","eateries","_useChart","chartData","datasets","backgroundColor","borderColor","borderWidth","_jsxs","Container","className","children","_jsx","Doughnut","DataPage","ChartJS","ArcElement","Tooltip","Legend","useAppDispatch","useDispatch","useSelector"],"sourceRoot":""}