{"version":3,"file":"static/js/698.dcf91d74.chunk.js","mappings":"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","sources":["components/Filters/Filters.tsx","components/Sort/Sort.tsx","helpers/dataFunctions.tsx","helpers/directionFunctions.tsx","helpers/priceFunctions.tsx","components/Eateries/Eateries.tsx","pages/EateriesPage/EateriesPage.tsx","redux/hooks.ts"],"sourcesContent":["import React, { ReactElement } from 'react';\nimport Badge from 'react-bootstrap/Badge';\nimport Button from 'react-bootstrap/Button';\nimport { Container } from 'react-bootstrap';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport PropTypes from 'prop-types';\n\nimport { calculatePrice } from '../../helpers/priceFunctions';\nimport { EateryInterface } from '../../shared/interfaces/eatery.interface';\nimport './Filters.css';\n\nexport default function Filters({\n    eateries,\n    setEateries,\n    initialEateries\n}: {\n    eateries: EateryInterface[];\n    setEateries: (eateries: EateryInterface[]) => void;\n    initialEateries: EateryInterface[];\n}): ReactElement | null {\n    const [types, setTypes] = React.useState<(number | string)[]>([]);\n    const [prices, setPrices] = React.useState<(number | string)[]>([]);\n    const [proximity, setProximity] = React.useState<(number | string)[]>([]);\n    const [selectedTypes, setSelectedTypes] = React.useState<(number | string)[]>([]);\n    const [selectedPrices, setSelectedPrices] = React.useState<(number | string)[]>([]);\n    const [selectedProximity, setSelectedProximity] = React.useState<(number | string)[]>([]);\n    type EateryKeys = 'type' | 'price' | 'proximity';\n\n    React.useEffect(() => {\n        const createOptions = function (\n            name: EateryKeys,\n            updateState: (array: (string | number)[]) => void\n        ) {\n            const options: Set<string | number> = new Set();\n\n            eateries.forEach((eatery) => {\n                const type = eatery[name];\n                if (typeof type === 'string' || typeof type === 'number') {\n                    if (!options.has(type)) {\n                        options.add(type);\n                    }\n                }\n            });\n            updateState([...options]);\n        };\n\n        createOptions('type', setTypes);\n        createOptions('price', setPrices);\n        createOptions('proximity', setProximity);\n    }, [eateries]);\n\n    const createDropdownOptions = (items: (string | number)[], className: string) => {\n        return items.sort().map((item, index) => {\n            if (className === 'price-options' && typeof item === 'number') {\n                const formattedPrice = calculatePrice(item);\n                return (\n                    <Dropdown.Item key={index} eventKey={formattedPrice} className={className}>\n                        {formattedPrice}\n                    </Dropdown.Item>\n                );\n            } else {\n                return (\n                    <Dropdown.Item key={index} eventKey={item} className={className}>\n                        {item}\n                    </Dropdown.Item>\n                );\n            }\n        });\n    };\n    const typeOptions = createDropdownOptions(types, 'type-options');\n    const priceOptions = createDropdownOptions(prices, 'price-options');\n    const proximityOptions = createDropdownOptions(proximity, 'proximity-options');\n    const updateSelectedOptions = (\n        value: number | string | null,\n        updateState: (array: (number | string)[]) => void,\n        currentState: (number | string)[],\n        type?: string\n    ) => {\n        if (value !== null) {\n            if (type === 'price') {\n                let currentPrice = 0;\n                if (value === '$') {\n                    currentPrice = 1;\n                } else if (value === '$$') {\n                    currentPrice = 2;\n                } else if (value === '$$$') {\n                    currentPrice = 3;\n                }\n                const isValuePresent =\n                    currentState.filter((item) => item === currentPrice).length > 0;\n                if (!isValuePresent) {\n                    updateState([...currentState, currentPrice]);\n                }\n            } else {\n                const isValuePresent = currentState.filter((item) => item === value).length > 0;\n                if (!isValuePresent) {\n                    updateState([...currentState, value]);\n                }\n            }\n        }\n    };\n    const createSelectedOptions = (items: (number | string)[], type?: string | undefined) => {\n        return items.map((item, index) => {\n            if (type === 'price') {\n                let currentPrice;\n                if (item === 1) {\n                    currentPrice = '$';\n                } else if (item === 2) {\n                    currentPrice = '$$';\n                } else if (item === 3) {\n                    currentPrice = '$$$';\n                }\n                return (\n                    <Badge pill bg=\"success\" key={index} className=\"selected-option\">\n                        {currentPrice}\n                    </Badge>\n                );\n            } else {\n                return (\n                    <Badge pill bg=\"success\" key={index} className=\"selected-option\">\n                        {item}\n                    </Badge>\n                );\n            }\n        });\n    };\n\n    const selectedTypeOptions = createSelectedOptions(selectedTypes);\n    const selectedPriceOptions = createSelectedOptions(selectedPrices, 'price');\n    const selectedProximityOptions = createSelectedOptions(selectedProximity);\n    const clearSelectedOptions = () => {\n        setSelectedTypes([]);\n        setSelectedPrices([]);\n        setSelectedProximity([]);\n        setEateries([...initialEateries]);\n    };\n    const filterEateriesByType = (\n        inputArray: EateryInterface[],\n        filterValue: string | null,\n        filterType: EateryKeys\n    ) => {\n        const filteredEateries: EateryInterface[] = [];\n        if (filterType === 'price') {\n            let currentPrice: undefined | number;\n            if (filterValue === '$') {\n                currentPrice = 1;\n            } else if (filterValue === '$$') {\n                currentPrice = 2;\n            } else if (filterValue === '$$$') {\n                currentPrice = 3;\n            }\n            inputArray.forEach((eatery) => {\n                if (eatery[filterType] === currentPrice) {\n                    filteredEateries.push(eatery);\n                }\n            });\n        } else {\n            inputArray.forEach((eatery) => {\n                if (eatery[filterType] === filterValue) {\n                    filteredEateries.push(eatery);\n                }\n            });\n        }\n        setEateries(filteredEateries);\n    };\n\n    return (\n        <Container className=\"filters-container\">\n            <Container className=\"filters-options-container\">\n                <h6>Filters</h6>\n                <DropdownButton\n                    title=\"Type\"\n                    className=\"dropdown-button\"\n                    onSelect={(value) => {\n                        updateSelectedOptions(value, setSelectedTypes, selectedTypes);\n                        filterEateriesByType(eateries, value, 'type');\n                    }}\n                >\n                    {typeOptions}\n                </DropdownButton>\n                <DropdownButton\n                    title=\"Price\"\n                    className=\"dropdown-button\"\n                    onSelect={(value) => {\n                        updateSelectedOptions(value, setSelectedPrices, selectedPrices, 'price');\n                        filterEateriesByType(eateries, value, 'price');\n                    }}\n                >\n                    {priceOptions}\n                </DropdownButton>\n                <DropdownButton\n                    title=\"Proximity\"\n                    className=\"dropdown-button\"\n                    onSelect={(value) => {\n                        updateSelectedOptions(value, setSelectedProximity, selectedProximity);\n                        filterEateriesByType(eateries, value, 'proximity');\n                    }}\n                >\n                    {proximityOptions}\n                </DropdownButton>\n                <Button className=\"filters-options-clear\" onClick={clearSelectedOptions}>\n                    Clear\n                </Button>\n            </Container>\n            <Container className=\"selected-options-container\">\n                <div className=\"selected-type-options\">{selectedTypeOptions}</div>\n                <div className=\"selected-price-options\">{selectedPriceOptions}</div>\n                <div className=\"selected-proximity-options\">{selectedProximityOptions}</div>\n            </Container>\n        </Container>\n    );\n}\n\nFilters.propTypes = {\n    eateries: PropTypes.array.isRequired,\n    setEateries: PropTypes.func.isRequired,\n    initialEateries: PropTypes.array.isRequired\n};\n","import React, { ReactElement } from 'react';\nimport { Container } from 'react-bootstrap';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport { FaArrowUp, FaArrowDown } from 'react-icons/fa6';\nimport PropTypes from 'prop-types';\n\nimport { EateryInterface } from '../../shared/interfaces/eatery.interface';\nimport './Sort.css';\n\nexport default function Sort({\n    eateries,\n    setEateries\n}: {\n    eateries: EateryInterface[];\n    setEateries: (eateries: EateryInterface[]) => void;\n}): ReactElement | null {\n    const sortValues = ['name', 'type', 'rating', 'price', 'zip code'].flatMap((i) => [i, i]);\n    type SortKeys = 'name' | 'price' | 'rating' | 'type' | 'zipCode' | 'zip code';\n\n    const createSortOptions = () => {\n        return sortValues.sort().map((item, index) => {\n            //alternate up arrow and down arrow for each value\n            if (index % 2 === 0) {\n                const eventKey = item + '_' + 'desc';\n                return (\n                    <Dropdown.Item key={index} eventKey={eventKey} className=\"sort-asc-option\">\n                        {item}{' '}\n                        <FaArrowUp\n                            className=\"sort-asc-icon\"\n                            title={`${item} sort ascending icon`}\n                        />\n                    </Dropdown.Item>\n                );\n            } else {\n                const eventKey = item + '_' + 'asc';\n                return (\n                    <Dropdown.Item key={index} eventKey={eventKey} className=\"sort-desc-option\">\n                        {item}{' '}\n                        <FaArrowDown\n                            className=\"sort-desc-icon\"\n                            title={`${item} sort descending icon`}\n                        />\n                    </Dropdown.Item>\n                );\n            }\n        });\n    };\n    const sortOptions = createSortOptions();\n    const sortOptionsFunc = (name: SortKeys, direction: string) => {\n        const currentEateries = [...eateries];\n        if (name === 'zip code') name = 'zipCode';\n        const nameKey = name as keyof EateryInterface;\n        if (nameKey === 'price' || nameKey === 'zipCode' || nameKey === 'rating') {\n            if (direction === 'asc') {\n                currentEateries.sort((a, b) => b[nameKey] - a[nameKey]);\n            } else {\n                currentEateries.sort((a, b) => a[nameKey] - b[nameKey]);\n            }\n        } else if (nameKey === 'name' || nameKey === 'type') {\n            if (direction === 'asc') {\n                currentEateries.sort((a, b) => b[nameKey].localeCompare(a[nameKey]));\n            } else {\n                currentEateries.sort((a, b) => a[nameKey].localeCompare(b[nameKey]));\n            }\n        }\n        setEateries(currentEateries);\n    };\n\n    return (\n        <Container className=\"sort-container\">\n            <DropdownButton\n                id=\"dropdown-basic-button\"\n                title=\"Sort\"\n                onSelect={(value) => {\n                    if (typeof value === 'string') {\n                        const valueArray = value.split('_');\n                        if (valueArray.length === 2) {\n                            sortOptionsFunc(valueArray[0] as SortKeys, valueArray[1]);\n                        }\n                    }\n                }}\n            >\n                {sortOptions}\n            </DropdownButton>\n        </Container>\n    );\n}\n\nSort.propTypes = {\n    eateries: PropTypes.array.isRequired,\n    setEateries: PropTypes.func.isRequired\n};\n","import { EateryInterface, EateriesInterface } from '../shared/interfaces/eatery.interface';\n\nexport const cleanUpData = function (object: EateriesInterface): EateryInterface[] {\n    return Object.keys(object).map((id) => object[id]);\n};\n","export const showDirections = function (lat: number, long: number): void {\n    window.open(`https://maps.google.com?q=${lat},${long}`);\n};\n","export const calculatePrice = function (number: number): string {\n    let result = '';\n    for (let i = 0; i < number; i++) {\n        result += '$';\n    }\n    return result;\n};\n","import React, { ReactElement } from 'react';\nimport BTable from 'react-bootstrap/Table';\nimport { Container } from 'react-bootstrap';\nimport { FaLocationDot } from 'react-icons/fa6';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { calculatePrice } from '../../helpers/priceFunctions';\nimport { cleanUpData } from '../../helpers/dataFunctions';\nimport { EateryInterface } from '../../shared/interfaces/eatery.interface';\nimport { formatEateriesProximity } from '../../redux/features/eateries/eateriesSlice';\nimport { showDirections } from '../../helpers/directionFunctions';\nimport { useAppSelector, useAppDispatch } from '../../redux/hooks';\nimport Filters from '../Filters/Filters';\nimport Sort from '../Sort/Sort';\nimport './Eateries.css';\n\nexport default function Eateries(): ReactElement | null {\n    const data = useAppSelector((state) => state.eateries.eateries);\n    const [eateries, setEateries] = React.useState<EateryInterface[]>(cleanUpData(data));\n    const [cleanedData] = React.useState<EateryInterface[]>(cleanUpData(data));\n    const geolocationFormatted = useAppSelector((state) => state.eateries.geolocationFormatted);\n    const dispatch = useAppDispatch();\n    const tableHeader = [\n        'name',\n        'type',\n        'rating',\n        'price',\n        'address',\n        'zip code',\n        'proximity',\n        'notes'\n    ];\n\n    React.useEffect(() => {\n        setEateries(cleanUpData(data));\n    }, [data]);\n\n    React.useEffect(() => {\n        dispatch(formatEateriesProximity());\n    }, [geolocationFormatted]);\n\n    const eateriesCount = eateries.length;\n    return (\n        <Container className=\"eateries-container\">\n            <Container className=\"eateries-container-filters-sort\">\n                <Filters\n                    eateries={eateries}\n                    setEateries={setEateries}\n                    initialEateries={cleanedData}\n                />\n                <Sort eateries={eateries} setEateries={setEateries} />\n            </Container>\n            <h4>Eateries ({eateriesCount})</h4>\n            <BTable striped bordered hover responsive size=\"sm\" className=\"eateries-table\">\n                <thead>\n                    <tr className=\"eateries-table-header\">\n                        {tableHeader.map((header, index) => {\n                            return <td key={index}>{header}</td>;\n                        })}\n                    </tr>\n                </thead>\n                <tbody>\n                    {eateries.map((eatery) => {\n                        const {\n                            name,\n                            type,\n                            rating,\n                            price,\n                            address,\n                            zipCode,\n                            proximity,\n                            note,\n                            latitude,\n                            longitude\n                        } = eatery;\n                        return (\n                            <tr key={uuidv4()} className=\"eateries-table-result\">\n                                <td>{name}</td>\n                                <td>{type}</td>\n                                <td>{rating}</td>\n                                <td>{calculatePrice(price)}</td>\n                                <td>\n                                    {address}\n                                    <FaLocationDot\n                                        onClick={() => showDirections(latitude, longitude)}\n                                        className=\"map-icon\"\n                                        title=\"directions icon\"\n                                    />\n                                </td>\n                                <td>{zipCode}</td>\n                                <td>{proximity}</td>\n                                <td>{note}</td>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </BTable>\n        </Container>\n    );\n}\n","import React, { ReactElement } from 'react';\n\nimport Eateries from '../../components/Eateries/Eateries';\nexport default function EateriesPage(): ReactElement | null {\n    return <Eateries />;\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n"],"names":["Filters","_ref","eateries","setEateries","initialEateries","_React$useState","React","_React$useState2","_slicedToArray","types","setTypes","_React$useState3","_React$useState4","prices","setPrices","_React$useState5","_React$useState6","proximity","setProximity","_React$useState7","_React$useState8","selectedTypes","setSelectedTypes","_React$useState9","_React$useState10","selectedPrices","setSelectedPrices","_React$useState11","_React$useState12","selectedProximity","setSelectedProximity","createOptions","name","updateState","options","Set","forEach","eatery","type","has","add","_toConsumableArray","createDropdownOptions","items","className","sort","map","item","index","formattedPrice","calculatePrice","_jsx","Dropdown","eventKey","children","typeOptions","priceOptions","proximityOptions","updateSelectedOptions","value","currentState","currentPrice","filter","length","concat","createSelectedOptions","Badge","pill","bg","selectedTypeOptions","selectedPriceOptions","selectedProximityOptions","filterEateriesByType","inputArray","filterValue","filterType","filteredEateries","push","_jsxs","Container","DropdownButton","title","onSelect","Button","onClick","Sort","sortOptions","flatMap","i","FaArrowUp","FaArrowDown","id","valueArray","split","direction","currentEateries","nameKey","a","b","localeCompare","sortOptionsFunc","cleanUpData","object","Object","keys","showDirections","lat","long","window","open","number","result","Eateries","data","useAppSelector","state","cleanedData","geolocationFormatted","dispatch","useAppDispatch","formatEateriesProximity","eateriesCount","BTable","striped","bordered","hover","responsive","size","header","rating","price","address","zipCode","note","latitude","longitude","FaLocationDot","uuidv4","EateriesPage","useDispatch","useSelector"],"sourceRoot":""}